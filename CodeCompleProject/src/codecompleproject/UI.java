/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codecompleproject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Nadee
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jButton3.setText("Calculate - SIZE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 60, 120, 40));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 730, 30));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 960, 240));

        jLabel1.setText("Browse a File to Check the cde complexity");
        jLabel1.setPreferredSize(new java.awt.Dimension(400, 20));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 360, 60));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code Line", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, 950, 220));

        jButton2.setText("Calculate - INHERITANCE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 390, 180, 50));

        jButton4.setText("Calculate - CONTROL STRUCTURE ");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 390, 250, 50));

        jButton5.setText("Calculate - SIZE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, 130, 50));

        jButton6.setText("Calculate - RECURSIVE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 390, 180, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 1040, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        jTextField1.setText(filename);

        try {
            FileReader reader = new FileReader(filename);
            BufferedReader br = new BufferedReader(reader);
            jTextArea1.read(br, null);
            br.close();
            jTextArea1.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String[] lineArr = jTextArea1.getText().trim().split("\n");
        Object[][] data = new Object[lineArr.length][2];
        String[] arithmeticArr2 = {"++", "--"};// put arithmetic operators to the array
        String[] relationalArr = {"==", "!="};
        String[] logicalArr = {"&&", "||", "~"};
        String[] miscellaneousArr = {",", "->", ".", "::"};
        String[] assgnOperatorsArr = {"+=", "-=", "*=", "/=", ">>>=", "|=", "&=", "%=", "<<=", "^="};
        String[] manipulatorsArr = {"endln", "\n"};

        String[] bitwiseArr = {">>>", "<<<"};
        String[] bitwiseArr2 = {"<<", ">>"};
        String[] arithmeticArr1 = {"|", "+", "-", "*", "/", "%", ">", "<", "!", "^"};
        String[] equal = {"="};
        String[] extra = {">>=", "<=", ">="};

        String keywords[] = {"abstract", "assert", "boolean",
            "break", "byte", "case", "catch", "char", "class", "const",
            "continue", "default", "do", "double", "extends", "false",
            "final", "finally", "float", "for", "goto", "if", "implements",
            "import", "instanceof", "int", "interface", "long", "native",
            "new", "null", "package", "private", "protected",
            "short", "strictfp", "super", "switch", "number",
            "synchronized", "this", "throw", "throws", "transient", "true",
            "volatile", "while"};

        String[][] sampleArr = {arithmeticArr2, relationalArr, logicalArr, miscellaneousArr, assgnOperatorsArr, manipulatorsArr};

        for (int i = 0; i < lineArr.length; i++) {
            int count = 0;
            for (int j = 0; j < sampleArr.length; j++) {
                for (int k = 0; k < sampleArr[j].length; k++) {
                    String test = lineArr[i];
                    int index = lineArr[i].indexOf(sampleArr[j][k]);
                    while (index != -1) {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + 1);
                        index = lineArr[i].indexOf(sampleArr[j][k]);
                    }
                    lineArr[i] = test;
                }
            }

            for (int m = 0; m < bitwiseArr2.length; m++) {
                String test = lineArr[i];
                int index = lineArr[i].indexOf(bitwiseArr2[m]);
                while (index != -1) {
                    if (index + 2 < lineArr[i].length() && (String.valueOf(lineArr[i].charAt(index + 2)).equalsIgnoreCase("=")
                            || String.valueOf(lineArr[i].charAt(index + 2)).equalsIgnoreCase(String.valueOf(bitwiseArr2[m].charAt(1))))) {
                        lineArr[i] = lineArr[i].substring(index + 2);
                        index = lineArr[i].indexOf(bitwiseArr2[m]);
                        continue;
                    } else {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + 2);
                        index = lineArr[i].indexOf(bitwiseArr2[m]);
                    }
                }
                lineArr[i] = test;
            }

            for (int m = 0; m < bitwiseArr.length; m++) {
                String test = lineArr[i];
                int index = lineArr[i].indexOf(bitwiseArr[m]);
                while (index != -1) {
                    if (index + 3 < lineArr[i].length() && (String.valueOf(lineArr[i].charAt(index + 3)).equalsIgnoreCase("="))) {
                        lineArr[i] = lineArr[i].substring(index + 3);
                        index = lineArr[i].indexOf(bitwiseArr[m]);
                        continue;
                    } else {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + 3);
                        index = lineArr[i].indexOf(bitwiseArr[m]);
                    }
                }
                lineArr[i] = test;
            }

            for (int m = 0; m < arithmeticArr1.length; m++) {
                Pattern pattern = Pattern.compile("[|<>=+-]");
                String test = lineArr[i];
                int index = lineArr[i].indexOf(arithmeticArr1[m]);
                while (index != -1) {
                    boolean b = false;
                    boolean c = false;
                    if (index + 1 < lineArr[i].length()) {
                        Matcher matcher = pattern.matcher(String.valueOf(lineArr[i].charAt(index + 1)));
                        b = matcher.find();
                    }
                    if (index - 1 > 0) {
                        Matcher matcher2 = pattern.matcher(String.valueOf(lineArr[i].charAt(index - 1)));
                        c = matcher2.find();
                    }
                    if (index == 0) {
                        c = true;
                    }
                    if (b == true || c == true) {
                        lineArr[i] = lineArr[i].substring(index + arithmeticArr1[m].length());
                        index = lineArr[i].indexOf(arithmeticArr1[m]);
                        continue;
                    } else {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + arithmeticArr1[m].length());
                        index = lineArr[i].indexOf(arithmeticArr1[m]);
                    }
                }
                lineArr[i] = test;
            }

            for (int m = 0; m < equal.length; m++) {
                Pattern pattern = Pattern.compile("[!@#$%^&*(),.?\":{}|<>+-=/]");
                String test = lineArr[i];
                boolean b = false;
                boolean c = false;
                int index = lineArr[i].indexOf(equal[m]);
                while (index != -1) {
                    if (index == 0) {
                        b = false;
                    } else {
                        Matcher matcher = pattern.matcher(String.valueOf(lineArr[i].charAt(index - 1)));
                        b = matcher.find();
                        Matcher matcher2 = pattern.matcher(String.valueOf(lineArr[i].charAt(index + 1)));
                        c = matcher2.find();

                        if (b == true || c == true) {
                            b = true;
                        }
                    }
                    if (index - 1 > 0 && b == true) {
                        lineArr[i] = lineArr[i].substring(index + 2);
                        index = lineArr[i].indexOf(equal[m]);
                        continue;
                    } else {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + 2);
                        index = lineArr[i].indexOf(equal[m]);
                    }
                }
                lineArr[i] = test;
            }

            for (int m = 0; m < keywords.length; m++) {
                String test = lineArr[i];
                int index = lineArr[i].indexOf(keywords[m]);
                while (index != -1) {
                    count++;
                    lineArr[i] = lineArr[i].substring(index + keywords[m].length());
                    index = lineArr[i].indexOf(keywords[m]);
                }
                lineArr[i] = test;
            }
            data[i][0] = lineArr[i];
            data[i][1] = count;
            System.out.println(lineArr[i] + " " + count);
        }

        Object[] columnNames = {"Code Line", "Value"};
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        jTable1.setModel(model);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
        // split the code line by line and assign them into a array
        //result.setVisible(true);


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String[] lineArr = jTextArea1.getText().trim().split("\n");
        Object[][] data = new Object[lineArr.length][2];

        String[] logical2 = {"&&", "||"};
        String[] logical = {"&", "|"};
        String[] keywordSet1 = {"if", "catch", "case"};
        String[] keywordsSet2 = {"for", "while"};

	//String[][] AllArr = {keywordSet1,keywordsSet2};	
        for (int i = 0; i < lineArr.length; i++) {

            int count = 0;
            for (int k = 0; k < keywordSet1.length; k++) {
                String test = lineArr[i];
                int index = lineArr[i].indexOf(keywordSet1[k]);
                while (index != -1) {
                    count++;
                    lineArr[i] = lineArr[i].substring(index + 1);
                    index = lineArr[i].indexOf(keywordSet1[k]);
                }
                lineArr[i] = test;
            }
            for (int m = 0; m < logical.length; m++) {
                String test = lineArr[i];
                int index = lineArr[i].indexOf(logical[m]);
                while (index != -1) {
                    count++;
                    lineArr[i] = lineArr[i].substring(index + 1);
                    index = lineArr[i].indexOf(logical[m]);
                }
                lineArr[i] = test;
            }

            data[i][0] = lineArr[i];
            data[i][1] = count;
            System.out.println(lineArr[i] + " " + count);

        }

        Object[] columnNames = {"Code Line", "CS Value"};
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        jTable1.setModel(model);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
        // split the code line by line and assign them into a array
        //result.setVisible(true);


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        /*Select the file from file chooser*/
        List<String> getMethods = new ArrayList<>();
        String filePath = "C:\\Users\\User\\Desktop\\SPM\\test.java";
		try {
			FileReader fileReader = new FileReader(filePath);
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			String line = null;
			while ((line = bufferedReader.readLine()) != null) {
				Pattern p = Pattern.compile(
						"(public|protected|private|static|\\s) +[\\w\\<\\>\\[\\]]+\\s+(\\w+) *\\([^\\)]*\\) *(\\{?|[^;])");
				Matcher m = p.matcher(line);
				while (m.find()) {
					String methodNameLine = m.group();
					getMethods.add(methodNameLine);
				}

			}

			                 System.out.println("METHODS: " + getMethods);
       
		} catch (Exception e) {
			e.printStackTrace();
		}
      
//        JFileChooser chooser = new JFileChooser();
//        chooser.showOpenDialog(null);
//        File f = chooser.getSelectedFile();
//       
//        /*get the class of the java file*/
//        Class<? extends File> c = f.getClass();
//        
//        /*get the public methods of the class*/
//        Method[] methods = c.getMethods();
//        
//        List<String> arr = new ArrayList<>();
//        // get the name of every method present in the list 
//        for (Method method : methods) {
//            /*get the name of the method name*/
//            String MethodName = method.getName();
//
//           
//            arr.add(MethodName);
//            System.out.println(" "+MethodName + " ocurrences : " + Collections.frequency(arr, MethodName));
//            
//           /*get the frequency of a element present in the list and append the result to the JTextArea1 */
//           jTextArea1.append(" "+MethodName + " ocurrences : " + Collections.frequency(arr, MethodName)+" ");
//           
//           
//           
//        }
//       

          
//        NewClass c = new NewClass();
//        c.printMesage();
//     
//        
//        jTextArea1.append("NewClass.printMesage Count : "+c.printMesage());
//        jTextArea1.append("  ");
//        jTextArea1.append("NewClass1.setManyValues() Count : "+NewClass1.setManyValues());
//        
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
